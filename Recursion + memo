You are given a string S of length N consisting of digits from ‘0’ to ‘9’. You need to partition the string in ‘K’ substrings such that each substring starts with an even digit and ends with an odd digit. Each substring must be of Length at least equal to ‘M’. Determine the total number of ways in which you can partition the string into ‘K’ substrings. Give answer modulo 1e9+7.
// necessary to cover all the characters of the string 
Sample: N=9, M=2, K=3, S=’454569421′


bool can_partition(ll start, ll end,ll len, ll m,  string&a,ll n, ll k){
     if(len>=m && start%2==0 && end%2==1 && k>0) return 1; 
     return 0;
}
//i len k
ll f(ll i, ll len, ll m, string& a,ll n, ll k,vector<vector<vector<ll>>>&dp){
   if(i>=n){
    return k==0;
   } 
   if(k<0) return 0;
   
   if(dp[i][len][k] !=-1) return dp[i][len][k];

   ll ways=0;
   for(ll ni=i; ni<n; ni++){
      if(can_partition(a[i]-'0',a[ni]-'0',ni-i+1,m,a,n,k)) {
         ways += f(ni+1, 0,m, a,n,k-1,dp);
         ways %=MOD;
      }
   }
 return dp[i][len][k]=ways;

}
void solve()
{   
  ll n,m,k ; cin>>n>>m>>k;
  string s; cin>>s;
   vector<vector<vector<ll>>>dp(n+1, vector<vector<ll>>(n+2, vector<ll>(k+1,-1)));
   ll ans= f(0,0,m,s,n,k,dp);
   cout<<ans<<"\n";

}
