801. Minimum Swaps To Make Sequences Increasing
Solved
Hard
Topics
Companies
You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].

For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].
Return the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.

An array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].

 

Example 1:

Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]
Output: 1
Explanation: 
Swap nums1[3] and nums2[3]. Then the sequences are:
nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]
which are both strictly increasing.
Example 2:

Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]
Output: 1
 

Constraints:

2 <= nums1.length <= 105
nums2.length == nums1.length
0 <= nums1[i], nums2[i] <= 2 * 105



class Solution {
public:
// Nice concept of flg to swap elements without changing the actual arrays

int f(int i,vector<int>& a, vector<int>& b , bool swapped, vector<vector<int>>&dp ){
    if(i>=a.size()) return 0;
    
    if(dp[i][swapped] !=-1) return dp[i][swapped];

   int pre1= a[i-1], pre2= b[i-1];
   if(swapped) swap(pre1, pre2);

    int swap=1e9, noswap=1e9;
 
    // no swap required
    if(a[i]>pre1 && b[i]>pre2){
        noswap= f(i+1,a,b,0,dp);
    }

    // swap
    if(a[i]>pre2  && b[i]>pre1){// as we are not actually changing arrays
        swap= 1+ f(i+1,a,b,1,dp);// bangalir ki galti 
    }

    return dp[i][swapped]=min(swap, noswap);
}

int tab(vector<int>& a, vector<int>& b){

     int n= a.size();
     vector<vector<int>>dp(n+2,vector<int>(2,0));
     for(int i=n-1;i>=1;i--){
         for(int swapped=1;swapped>=0;swapped--){
               int pre1= a[i-1], pre2= b[i-1];
            if(swapped==1) swap(pre1, pre2);

                int swap=1e9, noswap=1e9;
            
                // no swap required
                if(a[i]>pre1 && b[i]>pre2){
                    noswap= dp[i+1][0];
                }

                // swap
                if(a[i]>pre2  && b[i]>pre1){// as we are not actually changing arrays
                    swap= 1+ dp[i+1][1];// bangalir ki galti 
                }

                 dp[i][swapped]=min(swap, noswap);
         }
     }

   return dp[1][0];  
}

int space(vector<int>& a, vector<int>& b){

     int n= a.size();
    //  vector<vector<int>>dp(n+2,vector<int>(2,0));
      vector<int>nxt(2,0);
     for(int i=n-1;i>=1;i--){
         vector<int>curr(2,0);
         for(int swapped=1;swapped>=0;swapped--){
               int pre1= a[i-1], pre2= b[i-1];
            if(swapped==1) swap(pre1, pre2);

                int swap=1e9, noswap=1e9;
            
                // no swap required
                if(a[i]>pre1 && b[i]>pre2){
                    noswap= nxt[0];
                }

                // swap
                if(a[i]>pre2  && b[i]>pre1){// as we are not actually changing arrays
                    swap= 1+ nxt[1];// bangalir ki galti 
                }

                 curr[swapped]=min(swap, noswap);
         }
         nxt=curr;
     }

   return nxt[0];  
}
    int minSwap(vector<int>& a, vector<int>& b) {
        
        bool swapped=0;
        int n=a.size();
       vector<int>a2, b2;
    //    vector<vector<int>>dp(n+2,vector<int>(2,-1));
       a2.push_back(-1);
       b2.push_back(-1);
       for(int i=0;i<n;i++){
        a2.push_back(a[i]);
        b2.push_back(b[i]);
       }
    //    int cnt= f(1,a2,b2,swapped,dp);
    int cnt=tab(a2,b2);
    return cnt;    
    }
};
