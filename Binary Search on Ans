0. Split Array Largest Sum
Solved
Hard
Topics
Companies
Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= k <= min(50, nums.length)
class Solution {
public:
    int splitArray(vector<int>& nums, int k) {
          int l=0,h=0,n=nums.size();
        for(int i=0;i<n;++i) l=max(l,nums[i]), h+=nums[i];
    // Round Down format
        int res=0;
        while(l<h){
           int mid=l+ (h-l)/2;
            int cnt=0,tempsum=0;
            for(int i=0;i<n;++i){
                if(tempsum+nums[i]<=mid) tempsum+=nums[i];
                else cnt++,tempsum=nums[i];
            }
            cnt++; 
            
            if(cnt<=k) h=mid;
            else l=mid+1;
        }  
        return l;
        
    }
};
