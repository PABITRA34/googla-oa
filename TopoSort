
Problem name: Projects

Problem Statement:
There are several projects, and each is denoted by a one letter name. Each project may depend on one or more other projects (or none). For example, if project A depends on project B, then project A cannot complete before project B. Suppose you are given a list L, of K such dependencies, and also a list D, of J projects that have been delayed. Output a list of all projects that will be delayed, in lexicographical (alphabetical) order. You can assume that a project, A, will be delayed if any project A depends on is delayed. The input is guaranteed to contain no circular dependencies.

Input:

Test cases will be provided in the following multiline format. The first line contains one integer, C, which is the number of test cases that will follow. Each test case has the following format.

The first line of a test case contains two integers, K and J, separated by a space. K is the number of dependencies, and J is the number of delayed projects. K lines follow, each with the format:

XY

where X and Y are the names of projects and project X depends on project Y, project names are single uppercase English letters. Each pair gives a project dependency: Y must complete before X can complete. All K lines together form the list L of project dependencies.

Finally, the last line contains J space-delimited project names (single letters, uppercase). This gives the list D of length J of projects that have been delayed. Each project in D is listed in the dependency list at least once.

Limits:

Test case count: 1 <= C <= 20
Number of dependencies: 1 <= K <= 100
Number of projects: 1 <= J <= 26
Project name: Each name is a single uppercase letter from A to Z.
Outputs:
For each test case, output one line containing the test case index, starting from 1, followed by a space-delimited list of projects that will be delayed, do not add any space at the end of each line of output. The list must be in lexicographically sorted order. The resulting line should be in this format:

Case #i: X[1] X[2]...

where i is the index of the test case, starting from 1, and X[k] are the names of the projects that were delayed.

Sample Inputs:
3
2 1
B A
C B
B
5 2
P Q
P S
Q R
R T
S T
Q S
8 2
B A
C B
C E
D C
D F
E A
F E
G F
B F

Sample Output:
Case #1: B C
Case #2: P Q S
Case #3: B C D F G
 
void solve()
{   
     ll dep, del; cin>>dep>>del;     
     map<char, vector<char>>adj;
     map<char,ll>deg;
    
     for(ll i=1;i<=dep;i++){
        char u,v ;cin>>u>>v;        
        adj[v].pb(u);
        if(deg[v]==0) deg[v]=0;
         deg[u]++;
     }

     //TopoSort
     queue< char>q;

     for(auto &it: deg){
         if(it.second==0) q.push(it.first);
     }
     set<char>delayed;
     for(ll i=1; i<=del ;i++){
        char node; cin>>node;
        delayed.insert(node);
     }
 
     while(! q.empty()){
         auto u= q.front(); q.pop();
         for(auto &v : adj[u]){
             if(--deg[v] ==0) q.push(v);
             if(delayed.count(u)) delayed.insert(v);
         }
     }
  
   auto it=delayed.begin();
  while(it!=delayed.end()) {
    cout<<*it<<" ";
    it++;
  }

 
  cout<<"\n";   
     
}
int32_t main()
{ 
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t=1;
    cin >> t;
    int tt=1;
    while (tt <=t){ 
        // cout<<"entered\n";
        cout<<"Case #"<<tt<<": ";
        tt++;
       solve();     
    }
