// note: try to find test cases where this dp approach can fail
Minimum operations:
You are given an array A of N non-negative integers and an integer K. You can perform the following operation on this given array any number of times:
â€¢ Choose an index i (1<=i<=N), and increase the element at this index by 1

Task Determine the minimum number of operations that needs to be performed, so that every subarray of size 3 or more has a maximum element, greater than or equal to K .

Example:
n=4
k=5
a = [2,1,1,3]
ans = 4

How to do this?


ll f(ll i, vector<ll>&a,ll n, ll k,vector<ll>&dp){
    ll mini=0;
    
    if(dp[i] !=-1) return dp[i];

   if(i<n) mini= (k- min(k,a[i]))  + f(i+3,a,n,k,dp);// setting 1st index out of curr three available indices

   if(i+1 < n) mini=min(mini, (k- min(k,a[i+1]))  + f(i+3+1,a,n,k,dp) );// setting 2nd index

   if(i+2<n) mini=min(mini, (k- min(k,a[i+2]))  + f(i+3+2,a,n,k,dp) );// setting 3nd index

   // return the minimum among these three choices
   return dp[i]=mini;
  

}
void solve()
{   
  ll n,k ; cin>>n;
  vin(a,n)
  cin>>k;
   vector<ll>dp(n+1,-1);
  ll ans=f(0, a, n,k,dp);
  cout<<ans<<"\n";

}
